name: Microservices Buildpipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-ui:
    runs-on: ubuntu-latest  
    name: Static Code Analysis for c14r user interface
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with: 
          projectBaseDir: ui
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.UI_SONAR_TOKEN }}

  build-dexter:
    name: Static Code Analysis for Dexter Microservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/dexter/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.DEXTER_SONAR_TOKEN }}
        run: cd dexter && mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
  build-jobbie:
    name: Static Code Analysis for Jobbie Microservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/jobbie/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.JOBBIE_SONAR_TOKEN }}
        run: cd jobbie && mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  
  test-ui-image:
    name: Check if Docker image for UI can be built
    runs-on: ubuntu-latest
    steps:  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1            
      - name: Test UI Build 
        run: docker build -t uitest . 
        working-directory: 'ui/'          

  build-ridik:
    name: Static Code Analysis for Ridik Microservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/ridik/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.RIDIK_SONAR_TOKEN }}
        run: cd ridik && mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  
  e2e:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build Dexter Microservice Container Image
      run: mvn spring-boot:build-image
      working-directory: 'dexter/'
    - name: Build Ridik Microservice Container Image
      run: mvn spring-boot:build-image
      working-directory: 'ridik/'
    - name: Build Jobbie Microservice Container Image
      run: mvn spring-boot:build-image
      working-directory: 'jobbie/'
    - name: Execute End2End Test
      run: mvn test
      working-directory: 'e2e/'      
